{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Import libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 364,
   "metadata": {},
   "outputs": [],
   "source": [
    "# basic essential libraries\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import os\n",
    "\n",
    "# libraries for displaying images and videos\n",
    "import cv2\n",
    "import copy\n",
    "from IPython.display import HTML\n",
    "import io\n",
    "import base64\n",
    "\n",
    "# pose estimation library\n",
    "from pytorch_openpose.src import model\n",
    "from pytorch_openpose.src import util\n",
    "from pytorch_openpose.src.body import Body"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 361,
   "metadata": {},
   "outputs": [],
   "source": [
    "def draw_pose(candidate, subset, width=1200, height=800):\n",
    "    '''\n",
    "    Draw training data poses on a black canvas\n",
    "    '''\n",
    "    # initialise white image\n",
    "    img = np.zeros([height, width, 3],dtype=np.uint8)\n",
    "    \n",
    "    # draw poses\n",
    "    canvas = copy.deepcopy(img)\n",
    "    canvas = util.draw_bodypose(canvas, candidate, subset)\n",
    "    \n",
    "    # display plot\n",
    "    fig, axes = plt.subplots(1,1, figsize=(15,7.5))\n",
    "    plt.imshow(canvas[:, :, [2, 1, 0]])\n",
    "    plt.axis('off')\n",
    "    plt.show()\n",
    "    \n",
    "def gen_syn_data(feature_dir, delay_ms, width=1200, n=np.random.randint(3)):\n",
    "    '''\n",
    "    Choose subject n in video and replicate with delay. Randomly shuffles order of fastest dancer.\n",
    "    '''    \n",
    "    openpose_features = np.load(feature_dir, allow_pickle=True)\n",
    "    # choose position ordering\n",
    "    order = np.array([0,1,2])\n",
    "    np.random.shuffle(order)\n",
    "\n",
    "    # convert delay to frames and add random noise of up to 2 frames\n",
    "    # assume frame rate of 25fps\n",
    "    if delay_ms > 0:\n",
    "        delay_frames_max = int(delay_ms/40) - np.random.randint(0,2) \n",
    "        delay_frames_int = np.random.randint(0,delay_frames_max)\n",
    "    else:\n",
    "        delay_frames_max = 0\n",
    "        delay_frames_int = 0\n",
    "    delay_diff_int = delay_frames_max - delay_frames_int\n",
    "    delay = [0, delay_frames_int, delay_frames_max]\n",
    "\n",
    "    # get positions\n",
    "    pos_ref = np.where(order == 0)[0]\n",
    "    pos_int = np.where(order == 1)[0]\n",
    "    pos_max = np.where(order == 2)[0]\n",
    "\n",
    "    # print final selection\n",
    "    print('intialising with subject ' + str(n) + ': ')\n",
    "    print('Delay settings (frames) - pos 1: ' + str(delay[order[0]]) + \\\n",
    "          ', pos 2: ' + str(delay[order[1]]) + ', pos 3: ' + str(delay[order[2]]))\n",
    "\n",
    "    candidate_1 = []\n",
    "    candidate_2 = []\n",
    "    candidate_3 = []\n",
    "    mul_candidate = []\n",
    "    subset_1 = []\n",
    "    subset_2 = []\n",
    "    subset_3 = []\n",
    "    mul_subset = []\n",
    "    least_frame = 0\n",
    "    for frame in range(len(openpose_features['subset_all'])):\n",
    "        # initialise index\n",
    "        idx = openpose_features['subset_all'][frame,n,:].astype(int)\n",
    "        mean_x = np.mean(openpose_features['candidate_all'][frame][idx,0])\n",
    "        # initialise reference subject\n",
    "        candidate_1_adj = openpose_features['candidate_all'][frame][idx,:]\n",
    "        candidate_1_adj[:,0] += (pos_ref + 1) * width/4 - mean_x # adjust position\n",
    "        candidate_1.append(candidate_1_adj)\n",
    "        lin_points = np.linspace(0, 19, num=20)\n",
    "        lin_points[idx == -1] = -1\n",
    "        subset_1.append(np.expand_dims(lin_points, axis=0))\n",
    "        # initialise subject with intermediate delay \n",
    "        if frame >= delay_frames_int:\n",
    "            candidate_2_adj = openpose_features['candidate_all'][frame][idx,:]\n",
    "            candidate_2_adj[:,0] += ((pos_int + 1) * width/4 - mean_x) # adjust position\n",
    "            candidate_2.append(candidate_2_adj)\n",
    "            lin_points = np.linspace(0, 19, num=20)\n",
    "            lin_points[idx == -1] = -1\n",
    "            subset_2.append(np.expand_dims(lin_points, axis=0))\n",
    "        # initialise subject with maximum delay\n",
    "        if frame >= delay_frames_max:\n",
    "            candidate_3_adj = openpose_features['candidate_all'][frame][idx,:]\n",
    "            candidate_3_adj[:,0] += (pos_max + 1) * width/4 - mean_x # adjust position\n",
    "            candidate_3.append(candidate_3_adj)\n",
    "            lin_points = np.linspace(0, 19, num=20)\n",
    "            lin_points[idx == -1] = -1\n",
    "            subset_3.append(np.expand_dims(lin_points, axis=0))\n",
    "            # initialise concatenated subjects\n",
    "            mul_candidate.append(np.concatenate((candidate_1[least_frame], \\\n",
    "                                                 candidate_2[least_frame], candidate_3[least_frame])))\n",
    "            subset_cat = np.concatenate((subset_1[least_frame], \\\n",
    "                                         subset_2[least_frame], subset_3[least_frame]),axis=1)\n",
    "            lin_points = np.expand_dims(np.linspace(0, 59, num=60),axis=0)\n",
    "            lin_points[subset_cat == -1] = -1\n",
    "            mul_subset.append(lin_points.reshape(3,20))\n",
    "            least_frame += 1\n",
    "    return candidate_1, subset_1, candidate_2, subset_2, candidate_3, subset_3, mul_candidate, mul_subset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training example setup example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 354,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x540 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# load data\n",
    "feature_dir = '../Generated_output/npz_only/video1/output_features/seg1/pose_features.npz'\n",
    "openpose_features = np.load(feature_dir, allow_pickle=True)\n",
    "# draw initial pose\n",
    "draw_pose(openpose_features['candidate_all'][1], openpose_features['subset_all'][1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 363,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "intialising with subject 2: \n",
      "Delay settings (frames) - pos 1: 0, pos 2: 6, pos 3: 25\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1080x540 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1080x540 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1080x540 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x540 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# draw poses to check\n",
    "candidate_1, subset_1, candidate_2, subset_2, candidate_3, subset_3, \\\n",
    "mul_candidate, mul_subset = gen_syn_data(feature_dir, 1000)\n",
    "\n",
    "draw_pose(candidate_1[1], subset_1[1])\n",
    "draw_pose(candidate_2[1], subset_2[1])\n",
    "draw_pose(candidate_3[1], subset_3[1])\n",
    "draw_pose(mul_candidate[1], mul_subset[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Iterate over videos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
